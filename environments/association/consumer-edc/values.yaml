tractusx-connector:
  enabled: true
  install:
    vault: false
  imagePullSecrets:
    - name: machineuser-pull-secret-ro
  participant:
    id: <path:semantics/data/consumer-edc#participant-id>
  iatp:
    id: <path:semantics/data/consumer-edc#iatp-id>
    trustedIssuers:
      - <path:semantics/data/consumer-edc#iatp-trusted-issuers>
    sts:
      dim:
        url: <path:semantics/data/consumer-edc#iatp-sts-dim-url>
      oauth:
        token_url: <path:semantics/data/consumer-edc#iatp-sts-oauth-token-url>
        client:
          id: <path:semantics/data/consumer-edc#iatp-sts-oauth-client-id>
          secret_alias: <path:semantics/data/consumer-edc#iatp-sts-oauth-client-secretAlias>
  dataplane:
    token:
      signer:
        privatekey_alias: <path:semantics/data/consumer-edc#ec-private>
      verifier:
        publickey_alias: <path:semantics/data/consumer-edc#ec-public>
    endpoints:
      signaling:
        port: 9054
        path: /api/dataplane/signaling
      proxy:
        port: 9054
        path: /proxy
    ingresses:
      - enabled: true
        hostname: <path:semantics/data/consumer-edc#dataplane-hostname>
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          nginx.ingress.kubernetes.io/use-regex: "true"
          nginx.ingress.kubernetes.io/enable-cors: "true"
          nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
        certManager:
          clusterIssuer: letsencrypt-prod
        endpoints:
          - public
          - proxy
        className: nginx
        tls:
          enabled: true
    env:
      EDC_DPF_CONSUMER_PROXY: 9053
      EDC_DPF_SELECTOR_URL: <path:semantics/data/consumer-edc#dpf-selector-url>
  controlplane:
    endpoints:
      # -- default api for health checks, should not be added to any ingress
      default:
        # -- port for incoming api calls
        port: 8080
        # -- path for incoming api calls
        path: /api
      # -- data management api, used by internal users, can be added to an ingress and must not be internet facing
      management:
        # -- port for incoming api calls
        port: 8081
        # -- path for incoming api calls
        path: /management
        # -- authentication key, must be attached to each 'X-Api-Key' request header
        authKey: <path:semantics/data/consumer-edc#api-key>
      # -- control api, used for internal control calls. can be added to the internal ingress, but should probably not
      control:
        # -- port for incoming api calls
        port: 8083
        # -- path for incoming api calls
        path: /control
      # -- ids api, used for inter connector communication and must be internet facing
      protocol:
        # -- port for incoming api calls
        port: 8084
        # -- path for incoming api calls
        path: /api/v1/dsp
      # -- metrics api, used for application metrics, must not be internet facing
      metrics:
        # -- port for incoming api calls
        port: 9090
        # -- path for incoming api calls
        path: /metrics
    bdrs:
      server:
        url: <path:semantics/data/consumer-edc#bdrs-server-url>
    ingresses:
      - enabled: true
        hostname: <path:semantics/data/consumer-edc#controlplane-hostname>
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          nginx.ingress.kubernetes.io/use-regex: "true"
          nginx.ingress.kubernetes.io/enable-cors: "true"
          nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
        certManager:
          clusterIssuer: letsencrypt-prod
        endpoints:
          - ids
          - management
          - protocol
          - default
        className: nginx
        tls:
          enabled: true
  vault:
    fullnameOverride: "vault"
    hashicorp:
      url: <path:semantics/data/consumer-edc#vault-hashicorp-url>
      token: <path:semantics/data/consumer-edc#vault-hashicorp-token>
      paths:
        secret:  <path:semantics/data/consumer-edc#vault-hashicorp-secret-path>
        health: /v1/sys/health
    secretNames:
      transferProxyTokenSignerPrivateKey: <path:semantics/data/consumer-edc#ec-private>
      transferProxyTokenSignerPublicKey: <path:semantics/data/consumer-edc#ec-public>
      transferProxyTokenEncryptionAesKey: <path:semantics/data/consumer-edc#aes-key>

  postgresql:
    resources:
      limits:
        cpu: 50m
        memory: 190mi
      requests:
        cpu: 50m
        memory: 120mi
